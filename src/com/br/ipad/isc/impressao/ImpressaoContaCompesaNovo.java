package com.br.ipad.isc.impressao;import java.util.ArrayList;import java.util.Date;import java.util.List;import com.br.ipad.isc.bean.CategoriaSubcategoria;import com.br.ipad.isc.bean.ConsumoAnteriores;import com.br.ipad.isc.bean.ConsumoHistorico;import com.br.ipad.isc.bean.ContaCategoria;import com.br.ipad.isc.bean.ContaCategoriaConsumoFaixa;import com.br.ipad.isc.bean.ContaImposto;import com.br.ipad.isc.bean.CreditoRealizado;import com.br.ipad.isc.bean.DebitoCobrado;import com.br.ipad.isc.bean.HidrometroInstalado;import com.br.ipad.isc.bean.ImovelConta;import com.br.ipad.isc.bean.QualidadeAgua;import com.br.ipad.isc.bean.SistemaParametros;import com.br.ipad.isc.fachada.Fachada;import com.br.ipad.isc.util.ConstantesSistema;import com.br.ipad.isc.util.Util;/** * Classe que irá gera a string de buffer para impressão da conta ou da * notificação de débito *  * @author Bruno Barros e Rogério Peixoto - Carlos Chaves * @date 09/12/2010 - 17/07/2012 */public class ImpressaoContaCompesaNovo extends ImpressaoCompesa {	private static ImpressaoContaCompesaNovo instancia;	Fachada fachada = Fachada.getInstance();		private ImpressaoContaCompesaNovo() {		super();	}	public static ImpressaoContaCompesaNovo getInstancia(ImovelConta imovelInformado) {		if (instancia == null) {			instancia = new ImpressaoContaCompesaNovo();		}		instancia.imovel = imovelInformado;		return instancia;	}	public StringBuilder imprimirConta() {				buffer = new StringBuilder();				try {			//Carregando Informações			StringBuilder hidrometro = new StringBuilder("NÃO MEDIDO");			StringBuilder leituraAnterior = new StringBuilder("");			StringBuilder leituraInformada = new StringBuilder("");			StringBuilder leituraAtual = new StringBuilder("");			StringBuilder consumo = new StringBuilder("");			StringBuilder diasConsumo = new StringBuilder("");			StringBuilder dataLeituraAnterior = new StringBuilder("");			StringBuilder dataLeitura = new StringBuilder("");						HidrometroInstalado hidrometroInstaladoAgua = fachada.					buscarHidrometroInstaladoPorImovelTipoMedicao(imovel.getId(), ConstantesSistema.LIGACAO_AGUA);						HidrometroInstalado hidrometroInstaladoPoco = fachada.					buscarHidrometroInstaladoPorImovelTipoMedicao(imovel.getId(), ConstantesSistema.LIGACAO_POCO);						ConsumoHistorico consumoAgua = fachada.					buscarConsumoHistoricoPorImovelIdTipoLigacao(imovel.getId(), ConstantesSistema.LIGACAO_AGUA);						ConsumoHistorico consumoEsgoto = fachada.						buscarConsumoHistoricoPorImovelIdTipoLigacao(imovel.getId(), ConstantesSistema.LIGACAO_ESGOTO);			if (hidrometroInstaladoAgua != null) {				hidrometro = new StringBuilder(hidrometroInstaladoAgua.getNumeroHidrometro());				leituraAnterior.append(fachada.obterLeituraAnterior(hidrometroInstaladoAgua));				dataLeituraAnterior.append(Util.dateToString(hidrometroInstaladoAgua.getDataLeituraAnterior()));				dataLeitura.append(Util.dateToString(hidrometroInstaladoAgua.getDataLeitura()));				if (consumoAgua != null) {					if ( hidrometroInstaladoAgua.getLeituraAtualFaturamento() != null) {						leituraAtual.append(hidrometroInstaladoAgua.getLeituraAtualFaturamento());						leituraInformada.append(hidrometroInstaladoAgua.getLeitura());												Integer rateio = consumoAgua.getConsumoRateio()!=null?consumoAgua.getConsumoRateio():0;						consumo.append(consumoAgua.getConsumoCobradoMes()  - rateio);												diasConsumo.append(consumoAgua.getDiasConsumo());												if(hidrometroInstaladoAgua.getQtdDiasAjustado() != null){							diasConsumo.append(hidrometroInstaladoAgua.getQtdDiasAjustado());						}					} else {						if (consumoAgua.getLeituraAtual() != null) {														leituraAtual.append(consumoAgua.getLeituraAtual());							if (hidrometroInstaladoAgua.getLeitura() != null ) {								leituraInformada.append(hidrometroInstaladoAgua.getLeitura());							}						}						Integer rateio = consumoAgua.getConsumoRateio()!=null?consumoAgua.getConsumoRateio():0;						consumo.append(consumoAgua.getConsumoCobradoMes()  - rateio);												if ( hidrometroInstaladoAgua.getQtdDiasAjustado() != null) {							diasConsumo.append(hidrometroInstaladoAgua.getQtdDiasAjustado());						} else {							diasConsumo.append(consumoAgua.getDiasConsumo());						}											}				}			} else if (hidrometroInstaladoPoco != null) {				hidrometro = new StringBuilder(hidrometroInstaladoPoco.getNumeroHidrometro());				leituraAnterior.append(fachada.obterLeituraAnterior(hidrometroInstaladoPoco));				dataLeituraAnterior.append(Util.dateToString( hidrometroInstaladoPoco.getDataLeituraAnterior()));				dataLeitura.append(Util.dateToString(hidrometroInstaladoPoco.getDataLeitura()));								if (consumoEsgoto != null) {					if ( hidrometroInstaladoPoco.getLeituraAtualFaturamento() != null) {						leituraAtual.append(hidrometroInstaladoPoco.getLeituraAtualFaturamento());						leituraInformada.append(hidrometroInstaladoPoco.getLeitura());												Integer rateio = consumoEsgoto.getConsumoRateio()!=null?consumoEsgoto.getConsumoRateio():0;						consumo.append(consumoEsgoto.getConsumoCobradoMes()  - rateio);												diasConsumo.append(consumoEsgoto.getDiasConsumo());																		if(hidrometroInstaladoPoco.getQtdDiasAjustado() != null){							diasConsumo.append(hidrometroInstaladoPoco.getQtdDiasAjustado());						}											} else {						if (consumoEsgoto.getLeituraAtual()!= null) {							leituraAtual.append(consumoEsgoto.getLeituraAtual());							if (hidrometroInstaladoPoco.getLeitura() !=  null) {								leituraInformada.append(hidrometroInstaladoPoco.getLeitura());							} 						}						Integer rateio = consumoEsgoto.getConsumoRateio()!=null?consumoEsgoto.getConsumoRateio():0;						consumo.append(consumoEsgoto.getConsumoCobradoMes()  - rateio);												if (hidrometroInstaladoPoco.getQtdDiasAjustado() != null) {							diasConsumo.append(hidrometroInstaladoPoco.getQtdDiasAjustado());						} else {							diasConsumo.append(consumoEsgoto.getDiasConsumo());						}											}				}			}			else if (hidrometroInstaladoAgua == null && hidrometroInstaladoPoco == null) {				if (consumoAgua != null) {					if (consumoAgua.getLeituraAtual() != null) {						leituraAtual.append(consumoAgua.getLeituraAtual());					}					Integer rateio = consumoAgua.getConsumoRateio()!=null?consumoAgua.getConsumoRateio():0;					consumo.append(consumoAgua.getConsumoCobradoMes()  - rateio);										if(consumoAgua.getDiasConsumo()!=null){						diasConsumo.append(consumoAgua.getDiasConsumo());					}									} else {					if (consumoEsgoto != null) {						if (consumoEsgoto.getLeituraAtual() != null) {							leituraAtual.append(consumoEsgoto.getLeituraAtual());						}						Integer rateio = consumoEsgoto.getConsumoRateio()!=null?consumoEsgoto.getConsumoRateio():0;						consumo.append(consumoEsgoto.getConsumoCobradoMes()  - rateio);												if(consumoEsgoto.getDiasConsumo()!=null){							diasConsumo.append(consumoEsgoto.getDiasConsumo());						}											}				}			}			// Fim de Carregamento de Informações			// INICIANDO SCRIPT			// Header			// buffer = "! 0 200 200 2080 1";			buffer.append("! 0 816 0 1720 1\n");			// Data e Hora de Impressão			buffer.append("T90 0 1 814 785 IMPRESSO EM: " + Util.convertDateToDateStr(new Date()) + "\n");			buffer.append(formarLinha(7, 0, 240, 53, "FATURA MENSAL DE ÁGUA E ESGOTO", 0, 0));			//Dados do cliente			buffer.append(formarLinha(7, 0, 440, 95, imovel.getId().toString(), 0, 0));			// Ano mes de referencia da conta			buffer.append(formarLinha(7, 0, 573, 95, Util.retornaDescricaoMesDoAnoMes(imovel.getAnoMesConta().toString())					+ " / " + imovel.getAnoMesConta().toString().substring(0, 4), 0, 0));			// Dados do cliente			String cpfCnpjFormatado = "";			// if (imovel.getCpfCnpjCliente() != null &&			// !imovel.getCpfCnpjCliente().equals("")) {			// cpfCnpjFormatado = imovel.getCpfCnpjCliente().trim();			// }			buffer.append(formarLinha(7, 0, 48, 140, imovel.getNomeUsuario(), 0, 0));			buffer.append(formarLinha(7, 0, 563, 137, cpfCnpjFormatado, 0, 0));			buffer.append(dividirLinha(7, 0, 47, 163, imovel.getEndereco(), 40, 20));			// Inscricao			buffer.append(formarLinha(7, 0, 41, 258, fachada.formatarInscricao(imovel.getInscricao()), 0, 0));			// Grupo de Faturamento			buffer.append(formarLinha(7, 0, 320, 258, imovel.getGrupoFaturamento().toString() + "", 0, 0));								ArrayList<CategoriaSubcategoria> arrayListCategoriaSubcategoria = (ArrayList<CategoriaSubcategoria>) 								fachada.buscarCategoriaSubcategoriaPorImovelId(imovel.getId());						buffer.append(categoriasEconomias(arrayListCategoriaSubcategoria));						// Codigo da Rota			buffer.append(formarLinha(7, 0, 45, 323, imovel.getCodigoRota().toString() + "", 0, 0));			// Hidrometro			StringBuilder hidrometroOuTombamento = new StringBuilder();			if (hidrometro!=null && !hidrometro.equals("")){				hidrometroOuTombamento = hidrometro;			} else {				hidrometroOuTombamento.append(fachada.obterTombamento(imovel, ConstantesSistema.LIGACAO_AGUA));			}						buffer.append(formarLinha(7, 0, 182, 323, hidrometroOuTombamento.toString(), 0, 0));			// Situacao da ligacao de Agua			String situacaoAgua = fachada.getDescricaoSitLigacaoAgua(imovel.getSituacaoLigAgua());			if (situacaoAgua.length() > 13) {				buffer.append(formarLinha(7, 0, 419, 323, situacaoAgua.substring(0, 13), 0, 0));			} else {				buffer.append(formarLinha(7, 0, 419, 323, situacaoAgua, 0, 0));			}			// Situacao da ligacao de esgoto			buffer.append(formarLinha(7, 0, 624, 323, 					fachada.getDescricaoSitLigacaoEsgoto(imovel.getSituacaoLigEsgoto()), 0, 0));			// Leitura Atual Informada			buffer.append(formarLinha(7, 0, 45, 360, "LEIT ATUAL INF:", 0, 0));			buffer.append(formarLinha(7, 0, 280, 360, leituraInformada, 0, 0));			// Leitura Atual Faturada			buffer.append(formarLinha(7, 0, 45, 385, "LEIT. ATUAL FAT:", 0, 0));			buffer.append(formarLinha(7, 0, 280, 385, leituraAtual, 0, 0));			// Leitura Anterior			buffer.append(formarLinha(7, 0, 45, 410, "LEIT. ANT:", 0, 0));			buffer.append(formarLinha(7, 0, 280, 410, leituraAnterior, 0, 0));			// Consumo			buffer.append(formarLinha(7, 0, 45, 435, "CONSUMO (m3): ", 0, 0));			buffer.append(formarLinha(7, 0, 280, 435, consumo, 0, 0));					// Data Leitura Anterior			buffer.append(formarLinha(7, 0, 410, 360, "DATA LEITURA ANT:", 0, 0));			buffer.append(formarLinha(7, 0, 650, 360, dataLeituraAnterior, 0, 0));			// Data Leitura Anterior Atual			buffer.append(formarLinha(7, 0, 410, 385, "DATA LEITURA ATUAL:", 0, 0));			buffer.append(formarLinha(7, 0, 650, 385, dataLeitura, 0, 0));			// Numero de dias			buffer.append(formarLinha(7, 0, 410, 410, "DIAS CONSUMO:", 0, 0));			buffer.append(formarLinha(7, 0, 650, 410, diasConsumo, 0, 0));			//Consumo Rateio			StringBuilder consumoRateio = new StringBuilder("");			if(imovel.isCondominio()){				if (consumoAgua != null) {					consumoRateio.append(consumoAgua.getConsumoRateio()!=null?consumoAgua.getConsumoRateio():0);									} else if (consumoEsgoto!=null) {					consumoRateio.append(consumoEsgoto.getConsumoRateio()!=null?consumoEsgoto.getConsumoRateio():0);									}				buffer.append(formarLinha(7, 0, 410, 435, "CONSUMO RATEIO (m3):", 0, 0));				buffer.append(formarLinha(7, 0, 650, 435, consumoRateio, 0, 0));			}												// Divisória do quadro de Historico de Consumo/Qualidade da Agua			buffer.append("LINE 45 470 790 470 2\n");			buffer.append("BOX 283 507 790 571 1\n" +					// linha de baixo do box					"BOX 283 570 790 639 1\n" +					// quarta linha vertical do box					"LINE 656 551 656 639 1\n" +					// segunda linha vertical do box					"LINE 425 551 425 639 1\n" +					// terceira linha vertical do box					"LINE 535 551 535 639 1\n" +					// linha vertical da referencia de consumo					"LINE 250 515 250 690 1\n");			buffer.append(formarLinha(7, 0, 45, 476, "HISTÓRICO DE CONSUMO", 0, 0));			buffer.append(formarLinha(7, 0, 324, 476, "OPÇÃO PELO DEB. AUTOMÁTICO: ", 0, 0));			buffer.append(formarLinha(7, 0, 649, 476, imovel.getCodigoDebitoAutomatico() + "", 0, 0));			buffer.append(formarLinha(7, 0, 448, 520, "QUALIDADE DA AGUA", 0, 0));			buffer.append(formarLinha(7, 0, 65, 506, "REFERENCIA", 0, 0));			buffer.append(formarLinha(7, 0, 195, 506, "CONS ", 0, 0));						List<ConsumoAnteriores> consumoAnteriores;			consumoAnteriores = fachada.buscarConsumoAnterioresPorImovelId(imovel.getId());			String media = "0";									if(consumoAnteriores != null){								int sumConsumo = 0;								for(int i=0; i < consumoAnteriores.size(); i++){										buffer.append(formarLinha(7, 0, 85, 533, Util.formatarAnoMesParaMesAno(consumoAnteriores.get(i).getAnoMesReferencia() + "")							+ "", 0, i * 26));										buffer.append(formarLinha(7, 0, 205, 533, Util.adicionarZerosEsquerdaNumero(2, consumoAnteriores.get(i).getConsumo()							+ ""), 0, i * 26));									sumConsumo += consumoAnteriores.get(i).getConsumo();				}								media = (int) (sumConsumo / consumoAnteriores.size()) + "";			}						buffer.append(formarLinha(7, 0, 65, 690, "MEDIA", 0, 0));;			buffer.append(formarLinha(7, 0, 205, 690, Util.adicionarZerosEsquerdaNumero(2, media), 0, 0));						//QUALIDADE AGUA	       QualidadeAgua  qualidadeAgua = new QualidadeAgua();	     	       qualidadeAgua = fachada.	    		   buscarQualidadeAguaPorLocalidadeSetorComercial(imovel.getIdLocalidade(),  imovel.getIdSetorComercial());	       	       if(qualidadeAgua == null){	    	   	    	   qualidadeAgua = fachada.buscarQualidadeAguaPorLocalidade(imovel.getIdSetorComercial());	       }	       	       if(qualidadeAgua == null){	    	   qualidadeAgua = (QualidadeAgua)(fachada.pesquisar(new QualidadeAgua())).get(0);	       }				       buffer.append(formarLinha(7, 0, 287, 547, "PARAMETROS", 0, 0));	       buffer.append(formarLinha(7, 0, 429, 547, "UNIDADE", 0, 0));	       buffer.append(formarLinha(7, 0, 556, 547, "PADRAO", 0, 0));	       buffer.append(formarLinha(7, 0, 662, 547, "VL. OBTIDO", 0, 0));	       buffer.append(formarLinha(0, 0, 287, 584, "CLORO", 0, 0));	       buffer.append(formarLinha(0, 0, 287, 613, "TURBIDEZ", 0, 0));	       buffer.append(formarLinha(0, 2, 556, 584, qualidadeAgua.getCloroPadrao(), 0, 0));						buffer.append(formarLinha(0, 2, 429, 584, "mgCI/L", 0, 0));			buffer.append(formarLinha(0, 2, 429, 613, "uT", 0, 0));								 	if (qualidadeAgua.getNumeroCloroResidual()  != null) {				buffer.append(formarLinha(0, 2, 690, 584, qualidadeAgua.getNumeroCloroResidual() + "", 0, 0));			}						buffer.append(formarLinha(0, 2, 556, 613, qualidadeAgua.getTurbidezPadrao(), 0, 0));						if (qualidadeAgua.getNumeroTurbidez() != null ) {				buffer.append(formarLinha(0, 2, 690, 613, qualidadeAgua.getNumeroTurbidez() + "", 0, 0));			}						// Mensagem inserida a pedido da compesa			buffer.append(formarLinha(7, 0, 390, 645, "Reclamação de vazamento  de água", 0, 0));			buffer.append(formarLinha(7, 0, 390, 670, "e extravasamento de esgoto ligue", 0, 0));			buffer.append(formarLinha(7, 0, 390, 695, "para o número 0800 081 0185.", 0, 0));			// Divisória do quadro de Historico de Consumo/Qualidade da Agua			buffer.append("LINE 45 720 790 720 2\n");			// Descricao de Tarifa Agua/Esgoto			buffer.append(formarLinha(7, 0, 47, 725, "DESCRICAO", 0, 0));			buffer.append(formarLinha(7, 0, 530, 725, "CONSUMO", 0, 0));			buffer.append(formarLinha(7, 0, 680, 725, "TOTAL(R$)", 0, 0));			int ultimaLinhaAgua = 0;			int ultimaLinhaPoco = 0;			int quantidadeLinhasAtual = 0;			int quantidadeMaximaLinhas = 18;						ArrayList<Object> linhaAgua = this.gerarLinhasTarifaAgua(consumoAgua);			buffer.append(linhaAgua.get(0));			ultimaLinhaAgua = Integer.parseInt(linhaAgua.get(1).toString());			if (ultimaLinhaAgua != 0) {				quantidadeLinhasAtual = quantidadeLinhasAtual + ultimaLinhaAgua + 1;			}			ultimaLinhaAgua *= 25;			ArrayList<StringBuilder[]> tarifasPoco = this.gerarLinhasTarifaPoco();			ultimaLinhaPoco = ultimaLinhaAgua;			if (tarifasPoco!=null){				for (int i = 0; i < tarifasPoco.size(); i++) {					StringBuilder[] tarifaPoco = (StringBuilder[]) tarifasPoco.get(i);					ultimaLinhaPoco = ultimaLinhaAgua + ((i + 1) * 25);					quantidadeLinhasAtual++;					int deslocaDireitaColuna;					if (i == 0 || i == 1 || i == 2) {						deslocaDireitaColuna = i;					} else {						deslocaDireitaColuna = 2;					}					if (tarifaPoco[0] != null) {						buffer.append(formarLinha(7, 0, 53, 760, tarifaPoco[0], deslocaDireitaColuna * 10, (i + 1) * 25								+ ultimaLinhaAgua));					}					if (tarifaPoco[1] != null) {						buffer.append(formarLinha(7, 0, 530, 760, tarifaPoco[1], 0, (i + 1) * 25 + ultimaLinhaAgua));					}					if (tarifaPoco[2] != null) {						buffer.append(formarLinha(7, 0, 680, 760, tarifaPoco[2], 0, (i + 1) * 25 + ultimaLinhaAgua));					}				}				tarifasPoco=null;			}						int indicadorDiscriminarDescricao = retornaIndicadorDiscriminar(quantidadeMaximaLinhas, quantidadeLinhasAtual, 'd');			ArrayList<StringBuilder[]> debitos = this.gerarLinhasDebitosCobrados(indicadorDiscriminarDescricao);			int ultimaLinhaDebito = ultimaLinhaPoco;			if (debitos!=null){				for (int i = 0; i < debitos.size(); i++) {								StringBuilder[] debito = debitos.get(i);										ultimaLinhaDebito = ultimaLinhaPoco + ((i + 1) * 34);					quantidadeLinhasAtual++;					if (debito[0] != null) {						buffer.append(formarLinha(7, 0, 53, 760, debito[0], 0, (i + 1) * 25 + ultimaLinhaPoco));					}					if (debito[1] != null) {						buffer.append(formarLinha(7, 0, 680, 760, debito[1], 0, (i + 1) * 25 + ultimaLinhaPoco));					}				}				debitos = null;			}			indicadorDiscriminarDescricao = retornaIndicadorDiscriminar(quantidadeMaximaLinhas, quantidadeLinhasAtual, 'c');			ArrayList<StringBuilder[]> creditos = this.gerarLinhasCreditosRealizados(indicadorDiscriminarDescricao);			int ultimaLinhaCredito = ultimaLinhaDebito;			if (creditos!=null){				for (int i = 0; i < creditos.size(); i++) {								StringBuilder[] credito = creditos.get(i);					ultimaLinhaCredito = ultimaLinhaDebito + ((i + 1) * 34);										if (credito[0] != null) {						buffer.append(formarLinha(7, 0, 53, 760, credito[0].toString(), 0, (i + 1) * 25 + 								ultimaLinhaDebito));					}					if (credito[1] != null) {						buffer.append(formarLinha(7, 0, 680, 760, credito[1].toString(), 0, (i + 1) * 25 +								ultimaLinhaDebito));					}				}				creditos = null;			}						ArrayList<String[]> impostos = this.gerarLinhasImpostosRetidos();			if (impostos!=null){				for (int i = 0; i < impostos.size(); i++) {					String[] imposto = impostos.get(i);					int deslocaDireitaColuna;					if (i == 0 || i == 1) {						deslocaDireitaColuna = i;					} else {						deslocaDireitaColuna = 1;					}					if (imposto[0] != null) {						buffer.append(formarLinha(7, 0, 53, 770, imposto[0], deslocaDireitaColuna * 10, (i + 1) * 25								+ ultimaLinhaCredito));					}					if (imposto[1] != null) {						buffer.append(formarLinha(7, 0, 530, 770, imposto[1], 0, (i + 1) * 25 + ultimaLinhaCredito));					}					if (imposto[2] != null) {						buffer.append(formarLinha(7, 0, 680, 770, imposto[2], 0, (i + 1) * 25 + ultimaLinhaCredito));					}				}				impostos = null;			}												// Vencimento da Conta			buffer.append(formarLinha(7, 0, 45, 1248, "VENCIMENTO:", 0, 0));			String dataVencimento = Util.convertDateToDateStr(imovel.getDataVencimento());			dataVencimento = dataVencimento.substring(0, 10);			buffer.append(formarLinha(7, 1, 185, 1248, dataVencimento, 0, 0));			// Valor a Pagar			double valorTotalConta = fachada.obterValorConta(imovel.getId());									buffer.append(formarLinha(4, 0, 600, 1248, Util.formatarDoubleParaMoedaReal(valorTotalConta), 0, 0));			// Mensagem			buffer.append(formarLinha(7, 0, 45, 1305, "MENSAGEM:", 0, 0));									if (imovel.getMensagemContaAnormalidade1() != null && !imovel.getMensagemContaAnormalidade1().equals("")) {								if(imovel.getMensagemContaAnormalidade1().length() > 60){					buffer.append(formarLinha(7, 0, 47, 1335, imovel.getMensagemContaAnormalidade1().							substring(0, 60), 0, 0));				}else{					buffer.append(formarLinha(7, 0, 47, 1335, imovel.getMensagemContaAnormalidade1(), 0, 0));				}								if(imovel.getMensagemContaAnormalidade2() != null){									if(imovel.getMensagemContaAnormalidade2().length() > 60){						buffer.append(formarLinha(7, 0, 47, 1365, imovel.getMensagemContaAnormalidade2().								substring(0, 60), 0, 0));					}else{						buffer.append(formarLinha(7, 0, 47, 1365, imovel.getMensagemContaAnormalidade2(), 0, 0));					}									}								if(imovel.getMensagemContaAnormalidade3() != null){										if(imovel.getMensagemContaAnormalidade3().length() > 60){						buffer.append(formarLinha(7, 0, 47, 1395, imovel.getMensagemContaAnormalidade3().								substring(0, 60), 0, 0));					}else{						buffer.append(formarLinha(7, 0, 47, 1395, imovel.getMensagemContaAnormalidade3(), 0, 0));					}									}							} else {								if(imovel.getMensagemConta1() != null){										if(imovel.getMensagemConta1().length() > 60){						buffer.append(formarLinha(7, 0, 47, 1335, imovel.getMensagemConta1().substring(0, 60), 0, 0));					}else{						buffer.append(formarLinha(7, 0, 47, 1335, imovel.getMensagemConta1(), 0, 0));					}									}								if(imovel.getMensagemConta2() != null){										if(imovel.getMensagemConta2().length() > 60){						buffer.append(formarLinha(7, 0, 47, 1365, imovel.getMensagemConta2().substring(0, 60), 0, 0));					}else{						buffer.append(formarLinha(7, 0, 47, 1365, imovel.getMensagemConta2(), 0, 0));					}									}								if(imovel.getMensagemConta3() != null){										if(imovel.getMensagemConta3().length() > 60){						buffer.append(formarLinha(7, 0, 47, 1395, imovel.getMensagemConta3().substring(0, 60), 0, 0));					}else{						buffer.append(formarLinha(7, 0, 47, 1395, imovel.getMensagemConta3(), 0, 0));					}									}			}						// Canhoto			String dataValidadeConta = Util.convertDateToDateStr(imovel.getDataValidadeConta());			dataValidadeConta = dataValidadeConta.substring(0,10);			buffer.append(formarLinha(0, 2, 178, 1523, imovel.getId().toString(), 0, 0));			buffer.append(formarLinha(0, 2, 294, 1523, Util.formatarAnoMesParaMesAno(					imovel.getAnoMesConta().toString()), 0, 0));			buffer.append(formarLinha(0, 2, 408, 1523, dataVencimento , 0, 0));			buffer.append(formarLinha(0, 2, 544, 1523, dataValidadeConta, 0, 0));			buffer.append(formarLinha(0, 2, 695, 1523, Util.formatarDoubleParaMoedaReal(valorTotalConta), 0, 0));			// Codigo de Barras			if (imovel.getCodigoAgencia() == null || imovel.getCodigoAgencia().equals("")) {											StringBuilder representacaoNumericaCodBarra = CodigoDeBarras.getInstancia().obterRepresentacaoNumericaCodigoBarra(						3, valorTotalConta, Integer.parseInt(imovel.getInscricao().substring(0, 3)), 						imovel.getId(), Util.formatarAnoMesParaMesAnoSemBarra(imovel.getAnoMesConta().toString()), 						imovel.getDigitoVerificadorConta(), null, null, null, null, null, null);												StringBuilder representacaoNumericaCodBarraFormatada = new StringBuilder(						representacaoNumericaCodBarra.substring(0, 11).trim() + "-"						+ representacaoNumericaCodBarra.substring(11, 12).trim() + " "						+ representacaoNumericaCodBarra.substring(12, 23).trim() + "-"						+ representacaoNumericaCodBarra.substring(23, 24).trim() + " "						+ representacaoNumericaCodBarra.substring(24, 35).trim() + "-"						+ representacaoNumericaCodBarra.substring(35, 36).trim() + " "						+ representacaoNumericaCodBarra.substring(36, 47).trim() + "-"						+ representacaoNumericaCodBarra.substring(47, 48));				buffer.append(formarLinha(7, 0, 70, 1555, representacaoNumericaCodBarraFormatada, 0, 0));				StringBuilder representacaoCodigoBarrasSemDigitoVerificador = new StringBuilder(						representacaoNumericaCodBarra.substring(0, 11)						+ representacaoNumericaCodBarra.substring(12, 23) 						+ representacaoNumericaCodBarra.substring(24, 35)						+ representacaoNumericaCodBarra.substring(36, 47));				buffer.append("B I2OF5 1 2 105 35 1576 " + representacaoCodigoBarrasSemDigitoVerificador + "\n");			} else {				buffer.append(formarLinha(4, 0, 182, 1595, "DÉBITO AUTOMÁTICO", 0, 0));			}			buffer.append(comandoImpressao());		} catch (Exception ex) {			ex.printStackTrace();					} 		return buffer;	}	/**	 * [SB0003] - Gerar Linhas da Tarifa de Agua	 * 	 * @return Os dados estão dividos em 3 partes Descricao, de indice 0	 *         Consumo, de indice 1 Valor, de indice 2	 */	 private ArrayList<Object> gerarLinhasTarifaAgua(ConsumoHistorico consumoAgua) {		StringBuilder linhas = new StringBuilder();				ArrayList<CategoriaSubcategoria> arrayListCategoriaSubcategorias = new ArrayList<CategoriaSubcategoria>();				arrayListCategoriaSubcategorias = (ArrayList<CategoriaSubcategoria>) fachada.buscarCategoriaSubcategoriaPorImovelId(imovel.getId());					int qtdLinhas = 0;		// 3		if (arrayListCategoriaSubcategorias != null) {			for (int i = 0; i < arrayListCategoriaSubcategorias.size(); i++) {				CategoriaSubcategoria dadosEconomiasSubcategorias = (CategoriaSubcategoria) arrayListCategoriaSubcategorias.get(i);								ContaCategoria contaCategoriaAgua = new ContaCategoria();								contaCategoriaAgua = fachada.buscarContaCategoriaPorCategoriaSubcategoriaId						(dadosEconomiasSubcategorias.getId(), ConstantesSistema.LIGACAO_AGUA);								ArrayList<ContaCategoriaConsumoFaixa> arrayListContaCategoriaConsumoFaixa = new ArrayList<ContaCategoriaConsumoFaixa>();								if(contaCategoriaAgua != null){					arrayListContaCategoriaConsumoFaixa = fachada.							buscarContasCategoriasConsumosFaixasPorPorContaCategoriaId(contaCategoriaAgua.getId());				}								qtdLinhas++;				if (linhas.equals("")) {					// 2					linhas.append(formarLinha(7, 0, 47, 760, "AGUA", 0, 0));				}				// 3.1				int quantidaEconomias = 0;				// 3.1.1				if (dadosEconomiasSubcategorias.getFatorEconomiaCategoria() !=null && 						dadosEconomiasSubcategorias.getFatorEconomiaCategoria() > 0 ) {					quantidaEconomias = dadosEconomiasSubcategorias.getFatorEconomiaCategoria();					// 3.1.2				} else {					quantidaEconomias = dadosEconomiasSubcategorias.getQtdEconomiasSubcategoria();				}				// 3.3.1				StringBuilder descricao = new StringBuilder();				boolean tipoTarifaPorCategoria = SistemaParametros.getInstancia().getIndcTarifaCatgoria().						equals(ConstantesSistema.SIM);								if (tipoTarifaPorCategoria) {					descricao.append(dadosEconomiasSubcategorias.getDescricaoCategoria() + " "							+ quantidaEconomias + " "+ "UNIDADE(S)");					// 3.3.1.1, 3.3.1.2 e 3.3.2.2, 3.3.3					if (descricao.length() > 40) {						linhas.append(formarLinha(7, 0, 55, 760, descricao.substring(0, 40), 0, qtdLinhas * 25));					} else {						linhas.append(formarLinha(7, 0, 55, 760, descricao, 0, qtdLinhas * 25));					}									} else {					descricao = new StringBuilder(dadosEconomiasSubcategorias.getDescricaoAbreviadaSubcategoria()							+ " " + quantidaEconomias + " " + "UNIDADE(S)");					// 3.3.2.1, 3.3.1.2 e 3.3.2.2, 3.3.3					if (descricao.length() > 40) {						linhas.append(formarLinha(7, 0, 55, 760, descricao.substring(0, 40), 0, qtdLinhas * 25));					} else {						linhas.append(formarLinha(7, 0, 55, 760, descricao, 0, qtdLinhas * 25));					}				}				int consumoMinimo = 0;				if ( imovel.getConsumoMinAgua() != null && imovel.getConsumoMinimoImovel() != null &&						(imovel.getConsumoMinAgua() > imovel.getConsumoMinimoImovel())) {					consumoMinimo = imovel.getConsumoMinAgua();				} else {					consumoMinimo = imovel.getConsumoMinimoImovel();				}				// 3.4				if (consumoAgua == null && contaCategoriaAgua != null						&& contaCategoriaAgua.getNumConsumo() <= consumoMinimo) {					qtdLinhas++;					descricao = new StringBuilder();					// 3.4.2					descricao.append("TARIFA MINIMA "							+ Util.formatarDoubleParaMoedaReal(contaCategoriaAgua.getValorTarifaMinima().doubleValue()									/ quantidaEconomias) + " POR UNIDADE ");					linhas.append(formarLinha(7, 0, 63, 760, descricao, 0, qtdLinhas * 25));					descricao = new StringBuilder(consumoMinimo + " M3");					// 3.4.3					linhas.append(formarLinha(7, 0, 530, 760, descricao, 0, qtdLinhas * 25));					// 3.4.4					linhas.append(formarLinha(7, 0, 680, 760, 							Util.formatarDoubleParaMoedaReal(contaCategoriaAgua.getValorTarifaMinima().doubleValue()), 							0, qtdLinhas * 25));					// 3.5				} else {					// 3.5.1					if (contaCategoriaAgua != null							&& arrayListContaCategoriaConsumoFaixa != null							&& arrayListContaCategoriaConsumoFaixa.size() > 0) {						qtdLinhas++;						// 3.5.1.1						if (arrayListCategoriaSubcategorias.size() > 1) {							descricao = new StringBuilder("CONSUMO ACUMULADO DAS FAIXAS");							// 3.5.1.1.2.1							linhas.append(formarLinha(7, 0, 73, 760, descricao, 0, qtdLinhas * 25));														linhas.append(formarLinha(7, 0, 530, 760, (contaCategoriaAgua.getNumConsumo())									+ " M3", 0, qtdLinhas * 25));							// 3.5.1.1.2.2							linhas.append(formarLinha(7, 0, 680, 760, Util.formatarDoubleParaMoedaReal(contaCategoriaAgua.getValorFaturado().doubleValue()) 									, 0, qtdLinhas * 25));						} else {							// 3.5.1.2.2.1, 3.5.1.2.2.2, 3.5.1.2.2.3,							// 3.5.1.2.2.4							descricao = new StringBuilder("ATE " + ((int) contaCategoriaAgua.getNumConsumoMinimo() / 									quantidaEconomias) + " M3 - "									+ Util.formatarDoubleParaMoedaReal(contaCategoriaAgua.getValorTarifaMinima().doubleValue()											/ quantidaEconomias) + " POR UNIDADE");							linhas.append(formarLinha(7, 0, 73, 760, descricao, 0, qtdLinhas * 25));							// 3.5.1.2.3							linhas.append(formarLinha(7, 0, 530, 760, contaCategoriaAgua.getNumConsumoMinimo()									+ " M3", 0, qtdLinhas * 25));							// 3.5.1.2.4							linhas.append(formarLinha(7, 0, 680, 760, Util.formatarDoubleParaMoedaReal(									contaCategoriaAgua.getValorTarifaMinima().doubleValue()), 0, qtdLinhas * 25));							// 3.5.1.2.5							for (int j = 0; j < arrayListContaCategoriaConsumoFaixa.size(); j++) {								qtdLinhas++;								// 3.5.1.2.5								ContaCategoriaConsumoFaixa faixa = (ContaCategoriaConsumoFaixa) arrayListContaCategoriaConsumoFaixa.get(j);								// 3.5.1.2.5.1								if (faixa.getNumConsumoFinal() == ConstantesSistema.LIMITE_SUPERIOR_FAIXA_FINAL) {									// 3.5.1.2.5.1.2.1, 3.5.1.2.5.1.2.2,									// 3.5.1.2.5.1.2.3, 3.5.1.2.5.1.2.4,									// 3.5.1.2.5.1.2.5									descricao = new StringBuilder("ACIMA DE " + (faixa.getNumConsumoInicial() - 1) + " M3 - R$ "											+ Util.formatarDoubleParaMoedaReal(faixa.getValorTarifa().doubleValue()) 											+ " POR M3");									linhas.append(formarLinha(7, 0, 73, 760, descricao, 0, qtdLinhas * 25));									// 3.5.1.2.5.1.3.1									linhas.append(formarLinha(7, 0, 530, 760, faixa.getNumConsumo() * quantidaEconomias											+ " M3 ", 0, qtdLinhas * 25));									// 3.5.1.2.5.1.3.2									// 3.5.1.2.5.1.4									linhas.append(formarLinha(7, 0, 680, 760, 											Util.formatarDoubleParaMoedaReal(faixa.getValorFaturado().doubleValue()											* quantidaEconomias), 0, qtdLinhas * 25));									// 3.5.1.2.5.2								} else {									// 3.5.1.2.5.2.2.1, 3.5.1.2.5.2.2.2,									// 3.5.1.2.5.2.2.3, 3.5.1.2.5.2.2.4,									// 3.5.1.2.5.2.2.5, 3.5.1.2.5.2.2.6									descricao = new StringBuilder(faixa.getNumConsumoInicial() + " M3 A " + faixa.getNumConsumoFinal()											+ " M3 - R$ " + Util.formatarDoubleParaMoedaReal(faixa.getValorTarifa().doubleValue())											+ " POR M3 ");									// 3.5.1.2.5.2.3.1									linhas.append(formarLinha(7, 0, 73, 760, descricao, 0, qtdLinhas * 25));									// 3.5.1.2.5.1.3.2									linhas.append(formarLinha(7, 0, 530, 760, faixa.getNumConsumo() * quantidaEconomias											+ " M3 ", 0, qtdLinhas * 25));									// 3.5.1.2.5.1.4.1									linhas.append(formarLinha(7, 0, 680, 760, Util.formatarDoubleParaMoedaReal(faixa.getValorFaturado().doubleValue()											* quantidaEconomias), 0, qtdLinhas * 25));								}							}						}					} else {						if (contaCategoriaAgua != null) {							qtdLinhas++;							descricao = new StringBuilder("CONSUMO DE AGUA");							// 3.5.1.1.2.1							linhas.append(formarLinha(7, 0, 53, 760, descricao, 0, qtdLinhas * 25));							linhas.append(formarLinha(7, 0, 530, 760, ((int) contaCategoriaAgua.getNumConsumo())									+ " M3", 0, qtdLinhas * 25));							// 3.5.1.1.2.2							linhas.append(formarLinha(7, 0, 680, 760, 									Util.formatarDoubleParaMoedaReal(contaCategoriaAgua.getValorFaturado().doubleValue()), 									0, qtdLinhas * 25));						}					}				}			}		}		ArrayList<Object> retornar = new ArrayList<Object>();		retornar.add(linhas);		retornar.add(qtdLinhas);		return retornar;	}	/**	 * [SB0004] - Gerar Linhas da Tarifa de Esgoto	 * 	 * @return Os dados estão dividos em 3 partes Descricao, de indice 0	 *         Consumo, de indice 1 Valor, de indice 2	 */	private ArrayList<StringBuilder[]> gerarLinhasTarifaPoco() {		ArrayList<StringBuilder[]> buffer = new ArrayList<StringBuilder[]>();		// Os dados estão dividos em 3 partes		// Descricao, de indice 0		// Consumo, de indice 1		// Valor, de indice 2		StringBuilder[] dados = new StringBuilder[3];		double valorEsgoto = 0d;		int consumoAgua = 0;		int consumoEsgoto = 0;		double valorAgua = 0d;		// 3				ArrayList<CategoriaSubcategoria> arrayListCategoriaSubcategoria = new ArrayList<CategoriaSubcategoria>();		arrayListCategoriaSubcategoria = (ArrayList<CategoriaSubcategoria>) fachada.buscarCategoriaSubcategoriaPorImovelId(imovel.getId());						if (arrayListCategoriaSubcategoria != null) {						for (int i = 0; i < arrayListCategoriaSubcategoria.size(); i++) {								CategoriaSubcategoria categoriaSubcategoria = (CategoriaSubcategoria) arrayListCategoriaSubcategoria.get(i);				// 1 				Integer categoriaSubcategoriaId =  categoriaSubcategoria.getId();								ContaCategoria contaCategoriaPoco = new ContaCategoria();				ContaCategoria contaCategoriaAgua = new ContaCategoria();								contaCategoriaPoco = fachada.buscarContaCategoriaPorCategoriaSubcategoriaId						(categoriaSubcategoriaId, ConstantesSistema.LIGACAO_POCO);								contaCategoriaAgua = fachada.buscarContaCategoriaPorCategoriaSubcategoriaId						(categoriaSubcategoriaId, ConstantesSistema.LIGACAO_AGUA);								if(contaCategoriaPoco != null) {					if (contaCategoriaPoco.getValorFaturado() != null) {						valorEsgoto += contaCategoriaPoco.getValorFaturado().doubleValue();					}					if (contaCategoriaPoco.getValorFaturado() != null							&& contaCategoriaPoco.getNumConsumo() != null) {						consumoEsgoto += contaCategoriaPoco.getNumConsumo();					}				}							if(contaCategoriaAgua != null) {					if (contaCategoriaAgua.getValorFaturado() != null) {						if (contaCategoriaAgua.getNumConsumo() != null) {							consumoAgua += contaCategoriaAgua.getNumConsumo();						}						if (contaCategoriaAgua.getValorFaturado() != null) {							valorAgua += contaCategoriaAgua.getValorFaturado().doubleValue();						}					}				}			}					if (consumoAgua == consumoEsgoto && valorAgua != 0) {				if (valorEsgoto != 0) {					// 1.2.1					dados[0] = new StringBuilder("ESGOTO ");					// 1.2.3					dados[0].append(Util.formatarDoubleParaMoedaReal(imovel.getPercentCobrancaEsgoto().doubleValue()));					// 1.2.3					dados[0].append(" % DO VALOR DE ÁGUA");					// 1.4					dados[2] = new StringBuilder(Util.formatarDoubleParaMoedaReal(valorEsgoto));					buffer.add(dados);				}			} else {				if (valorEsgoto != 0) {					// 1.2.1					dados[0] = new StringBuilder("ESGOTO ");					// 1.3.1					dados[1] = new StringBuilder(consumoEsgoto+"");					// 1.3.2					dados[1].append(" M3");					// 1.4					dados[2] = new StringBuilder(Util.formatarDoubleParaMoedaReal(valorEsgoto));					buffer.add(dados);				}			}		}		return buffer;	} 	/**	 * [SB0005] - Gerar Linhas da Debitos Cobrados	 * 	 * @return Os dados estão dividos em 3 partes Descricao, de indice 0	 *         Consumo, de indice 1 Valor, de indice 2	 */	private ArrayList<StringBuilder[]> gerarLinhasDebitosCobrados(int indicadorDiscriminarDescricao) {			ArrayList<StringBuilder[]> buffer = new ArrayList<StringBuilder[]>();		// Os dados estão dividos em 3 partes		// Descricao, de indice 0		// Consumo, de indice 1		// Valor, de indice 2		//StringBuilder[] dados = new StringBuilder[2];			StringBuilder[] dados = new StringBuilder[2];		ArrayList<DebitoCobrado> arrayListDebitoCobrado = new  ArrayList<DebitoCobrado>();		arrayListDebitoCobrado = (ArrayList<DebitoCobrado>) fachada.buscarDebitoCobradoPorImovelId(imovel.getId());		// 3		if (arrayListDebitoCobrado != null) {			// caso seja para discriminar os dados dos débitos			if (indicadorDiscriminarDescricao == 1) {				for (int i = 0; i < arrayListDebitoCobrado.size(); i++) {					DebitoCobrado dadosDebitosCobrados = (DebitoCobrado) arrayListDebitoCobrado.get(i);					// 1.1.2					dados[0] = new StringBuilder(dadosDebitosCobrados.getDescricaoDebitoTipo());					// 1.1.3					dados[1] = new StringBuilder(Util.formatarDoubleParaMoedaReal(dadosDebitosCobrados.getValor().doubleValue()));										buffer.add(dados);					dados = new StringBuilder[2];				}			} else {				double soma = 0d;				for (int i = 0; i < arrayListDebitoCobrado.size(); i++) {					DebitoCobrado dadosDebitosCobrados = (DebitoCobrado) arrayListDebitoCobrado.get(i);					soma += dadosDebitosCobrados.getValor().doubleValue();				}				// 1.1.2				dados[0] = new StringBuilder("DEBITOS");				// 1.1.3				dados[1] = new StringBuilder(Util.formatarDoubleParaMoedaReal(soma));				buffer.add(dados);			}		}		return buffer;	}	/**	 * [SB0006] - Gerar Linhas da Creditos Realizados	 * 	 * @return Os dados estão dividos em 3 partes Descricao, de indice 0	 *         Consumo, de indice 1 Valor, de indice 2	 */	 private ArrayList<StringBuilder[]> gerarLinhasCreditosRealizados(int indicadorDiscriminarDescricao) {		 	ArrayList<StringBuilder[]> buffer = new ArrayList<StringBuilder[]>();			// Os dados estão dividos em 3 partes			// Descricao, de indice 0			// Consumo, de indice 1			// Valor, de indice 2			StringBuilder[] dados = null;			ArrayList<CreditoRealizado> arrayListCreditoRealizado = new ArrayList<CreditoRealizado>();						arrayListCreditoRealizado = (ArrayList<CreditoRealizado>) fachada.buscarCreditoRealizadoPorImovelId(imovel.getId());														// 3			if (arrayListCreditoRealizado != null) {				// caso seja para discriminar os dados dos débitos				if (indicadorDiscriminarDescricao == 1) {					// caso o valor do crédito seja maior que o valor da conta sem o					// crédito					double valorContaSemCreditos = 0d;					boolean valorCreditoMaiorValorConta = false;					boolean naoEmitirMaisCreditos = false;										double valorResidual = 0;  					double valorCreditos = 0;										valorCreditos = fachada.obterValorCreditoTotal(imovel.getId());					valorContaSemCreditos = fachada.obterValorContaSemCreditos(imovel.getId());										if (valorCreditos != 0d) {						if (valorContaSemCreditos < valorCreditos) {							valorResidual = valorCreditos - valorContaSemCreditos;													}					}										if (valorResidual != 0d) {						valorCreditoMaiorValorConta = true;					}										for (int i = 0; i < arrayListCreditoRealizado.size(); i++) {						dados = new StringBuilder[2];											CreditoRealizado dadosCreditosRealizado = (CreditoRealizado) arrayListCreditoRealizado.get(i);						// caso o valor dos créditos n seja maior que o valor da						// conta sem os créditos						if (!valorCreditoMaiorValorConta) {														// 1.1.2							dados[0] = new StringBuilder(dadosCreditosRealizado.getDescricaoCreditoTipo());							// 1.1.3							dados[1] = new StringBuilder(""+Util.formatarDoubleParaMoedaReal(dadosCreditosRealizado.getValor().doubleValue()));						}						// //caso o valor dos créditos seja maior que o valor das						// contas sem os créditos						else {							if (!naoEmitirMaisCreditos) {								double valorCredito = dadosCreditosRealizado.getValor().doubleValue();								double valorContaSemCreditosMenorCredito = valorContaSemCreditos - valorCredito;								// emite as créditos até o valor dos creditos ser								// menor que o valor da conta								if (valorContaSemCreditosMenorCredito < 0d) {									valorCredito = valorContaSemCreditos;									naoEmitirMaisCreditos = true;								} else {									valorContaSemCreditos = valorContaSemCreditosMenorCredito;								}																// 1.1.2								dados[0] = new StringBuilder(dadosCreditosRealizado.getDescricaoCreditoTipo());								// 1.1.3								dados[1] = new StringBuilder(""+Util.formatarDoubleParaMoedaReal(valorCredito));							}						}												buffer.add(dados);					}				} else {					dados = new StringBuilder[2];					double soma =0.d;										 for ( int i = 0; i < arrayListCreditoRealizado.size(); i++ ){											 CreditoRealizado dadosCreditosRealizado = (CreditoRealizado ) arrayListCreditoRealizado.get(i);						 soma += dadosCreditosRealizado.getValor().doubleValue();					 }										// 1.1.2					dados[0] = new StringBuilder("CREDITOS");					// 1.1.3					dados[1] = new StringBuilder(Util.formatarDoubleParaMoedaReal(soma));					buffer.add(dados);				}			}			return buffer;		}		 	/**	 * [SB0007] - Gerar Linhas Impostos Retidos	 * 	 * @return Os dados estão dividos em 3 partes Descricao, de indice 0	 *         Consumo, de indice 1 Valor, de indice 2	 */	 private ArrayList<String[]> gerarLinhasImpostosRetidos() {		ArrayList<String[]> buffer = null;				ArrayList<ContaImposto> arrayContaImposto = (ArrayList<ContaImposto>) fachada.buscarContaImpostoPorImovelId(imovel.getId());						if (arrayContaImposto != null) {						buffer = new ArrayList<String[]>();						// Os dados estao dividos em 3 partes			// Descricao, de indice 0			// Consumo, de indice 1			// Valor, de indice 2			String[] dados = new String[3];						String dadosImposto = "";			for (int i = 0; i < arrayContaImposto.size(); i++) {				ContaImposto contaImposto = (ContaImposto) arrayContaImposto.get(i);				String descricaoImposto = contaImposto.getDescricaoImposto();				String percentualAliquota = Util.formatarDoubleParaMoedaReal(contaImposto.getPercentualAlicota().doubleValue());				dadosImposto += descricaoImposto + "-" + percentualAliquota + "% ";			}			dados = new String[3];			// 1.1.2			dados[0] = "DED. IMPOSTOS LEI FEDERAL N.9430 DE 27/12/1996";			// 1.1.3						double valorImposto = 0.d;						valorImposto = fachada.obterValorImpostoTotal(imovel.getId());									dados[2] = Util.formatarDoubleParaMoedaReal(valorImposto);			buffer.add(dados);			dados = new String[3];			// 1.1.2			dados[0] = dadosImposto;			buffer.add(dados);		}		return buffer;	}		private int retornaIndicadorDiscriminar(int quantidadeMaximaLinhas, int quantidadeLinhasAtual, char servicos) {		int indicadorDiscriminarDescricao = 1;		int linhasRestantesDescricao = 0;				Fachada fachada = Fachada.getInstance();					Integer qntDebitoCobrado = fachada.obterQntDebitoCobradoPorImovelId(imovel.getId());		Integer qntContaImposto = fachada.obterQntContaImpostoPorImovelId(imovel.getId());		Integer qntCreditoRealizado = fachada.obterQntCreditoRealizadoPorImovelId(imovel.getId());					switch (servicos) {		case 'd':			// linhas que ainda aparecerão depois do débio (crédito e imposto)			// linhas de crédito			if (qntCreditoRealizado != null) {				linhasRestantesDescricao = linhasRestantesDescricao + 1;			}			// linhas de imposto			if (qntContaImposto != null) {				linhasRestantesDescricao = linhasRestantesDescricao + 2;			}			// linhas de débito			if (qntDebitoCobrado != null) {				// linhasRestantesDescricao = linhasRestantesDescricao + 1;				int limiteDescriminar = quantidadeMaximaLinhas - quantidadeLinhasAtual - linhasRestantesDescricao;				int quantidadeDebitos = qntDebitoCobrado.intValue();				if (quantidadeDebitos > limiteDescriminar) {					indicadorDiscriminarDescricao = 2;				}			}			break;		case 'c':			// linhas que ainda aparecerão depois do débio (crédito e imposto)			// linhas de imposto			if (qntContaImposto != null) {				linhasRestantesDescricao = linhasRestantesDescricao + 2;			}			// linhas de credito			if (qntCreditoRealizado != null) {				// linhasRestantesDescricao = linhasRestantesDescricao + 1;				int limiteDescriminar = quantidadeMaximaLinhas - quantidadeLinhasAtual - linhasRestantesDescricao;				int quantidadeCreditos = qntCreditoRealizado.intValue();				if (quantidadeCreditos > limiteDescriminar) {					indicadorDiscriminarDescricao = 2;				}			}			break;		}		return indicadorDiscriminarDescricao;	}}